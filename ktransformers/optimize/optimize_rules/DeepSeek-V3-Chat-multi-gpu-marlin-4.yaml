# Embedding tokens configuration
- match:
    name: "^model.embed_tokens"
  replace:
    class: "default"
    kwargs:
        generate_device: "cpu"
        prefill_device: "cpu"

# Rotary Embeddings for GPU 0 (layers 0-15)
- match:
    name: "^model\\.layers\\.(0|[1-9]|1[0-5])\\."
    class: ktransformers.models.modeling_deepseek_v3.DeepseekV3RotaryEmbedding
  replace:
    class: ktransformers.operators.RoPE.RotaryEmbeddingV3
    kwargs:
      generate_device: "cuda:0"
      prefill_device: "cuda:0"

# Rotary Embeddings for GPU 1 (layers 16-30)
- match:
    name: "^model\\.layers\\.(1[6-9]|2[0-9]|30)\\."
    class: ktransformers.models.modeling_deepseek_v3.DeepseekV3RotaryEmbedding
  replace:
    class: ktransformers.operators.RoPE.RotaryEmbeddingV3
    kwargs:
      generate_device: "cuda:1"
      prefill_device: "cuda:1"

# Rotary Embeddings for GPU 2 (layers 31-45)
- match:
    name: "^model\\.layers\\.(3[1-9]|4[0-5])\\."
    class: ktransformers.models.modeling_deepseek_v3.DeepseekV3RotaryEmbedding
  replace:
    class: ktransformers.operators.RoPE.RotaryEmbeddingV3
    kwargs:
      generate_device: "cuda:2"
      prefill_device: "cuda:2"

# Rotary Embeddings for GPU 3 (layers 46-60)
- match:
    name: "^model\\.layers\\.(4[6-9]|5[0-9]|60)\\."
    class: ktransformers.models.modeling_deepseek_v3.DeepseekV3RotaryEmbedding
  replace:
    class: ktransformers.operators.RoPE.RotaryEmbeddingV3
    kwargs:
      generate_device: "cuda:3"
      prefill_device: "cuda:3"

# Linear layers for GPU 0 (layers 0-15)
- match:
    name: "^model\\.layers\\.(0|[1-9]|1[0-5])\\.(?!self_attn\\.kv_b_proj).*$"
    class: torch.nn.Linear
  replace:
    class: ktransformers.operators.linear.KTransformersLinear
    kwargs:
      generate_device: "cuda:0"
      prefill_device: "cuda:0"
      generate_op: "KLinearMarlin"
      prefill_op: "KLinearTorch"

# Linear layers for GPU 1 (layers 16-30)
- match:
    name: "^model\\.layers\\.(1[6-9]|2[0-9]|30)\\.(?!self_attn\\.kv_b_proj).*$"
    class: torch.nn.Linear
  replace:
    class: ktransformers.operators.linear.KTransformersLinear
    kwargs:
      generate_device: "cuda:1"
      prefill_device: "cuda:1"
      generate_op: "KLinearMarlin"
      prefill_op: "KLinearTorch"

# Linear layers for GPU 2 (layers 31-45)
- match:
    name: "^model\\.layers\\.(3[1-9]|4[0-5])\\.(?!self_attn\\.kv_b_proj).*$"
    class: torch.nn.Linear
  replace:
    class: ktransformers.operators.linear.KTransformersLinear
    kwargs:
      generate_device: "cuda:2"
      prefill_device: "cuda:2"
      generate_op: "KLinearMarlin"
      prefill_op: "KLinearTorch"

# Linear layers for GPU 3 (layers 46-60)
- match:
    name: "^model\\.layers\\.(4[6-9]|5[0-9]|60)\\.(?!self_attn\\.kv_b_proj).*$"
    class: torch.nn.Linear
  replace:
    class: ktransformers.operators.linear.KTransformersLinear
    kwargs:
      generate_device: "cuda:3"
      prefill_device: "cuda:3"
      generate_op: "KLinearMarlin"
      prefill_op: "KLinearTorch"

# MLP configurations for GPU 0 (layers 0-15)
- match:
    name: "^model\\.layers\\.(0|[1-9]|1[0-5])\\.mlp$"
    class: ktransformers.models.modeling_deepseek_v3.DeepseekV3MoE
  replace:
    class: ktransformers.operators.experts.KDeepseekV3MoE
    kwargs:
      generate_device: "cuda:0"
      prefill_device: "cuda:0"

# MLP configurations for GPU 1 (layers 16-30)
- match:
    name: "^model\\.layers\\.(1[6-9]|2[0-9]|30)\\.mlp$"
    class: ktransformers.models.modeling_deepseek_v3.DeepseekV3MoE
  replace:
    class: ktransformers.operators.experts.KDeepseekV3MoE
    kwargs:
      generate_device: "cuda:1"
      prefill_device: "cuda:1"

# MLP configurations for GPU 2 (layers 31-45)
- match:
    name: "^model\\.layers\\.(3[1-9]|4[0-5])\\.mlp$"
    class: ktransformers.models.modeling_deepseek_v3.DeepseekV3MoE
  replace:
    class: ktransformers.operators.experts.KDeepseekV3MoE
    kwargs:
      generate_device: "cuda:2"
      prefill_device: "cuda:2"

# MLP configurations for GPU 3 (layers 46-60)
- match:
    name: "^model\\.layers\\.(4[6-9]|5[0-9]|60)\\.mlp$"
    class: ktransformers.models.modeling_deepseek_v3.DeepseekV3MoE
  replace:
    class: ktransformers.operators.experts.KDeepseekV3MoE
    kwargs:
      generate_device: "cuda:3"
      prefill_device: "cuda:3"

# MoE Gate configurations for GPU 0 (layers 0-15)
- match:
    name: "^model\\.layers\\.(0|[1-9]|1[0-5])\\.mlp\\.gate$"
    class: ktransformers.models.modeling_deepseek_v3.MoEGate
  replace:
    class: ktransformers.operators.gate.KMoEGate
    kwargs:
      generate_device: "cuda:0"
      prefill_device: "cuda:0"

# MoE Gate configurations for GPU 1 (layers 16-30)
- match:
    name: "^model\\.layers\\.(1[6-9]|2[0-9]|30)\\.mlp\\.gate$"
    class: ktransformers.models.modeling_deepseek_v3.MoEGate
  replace:
    class: ktransformers.operators.gate.KMoEGate
    kwargs:
      generate_device: "cuda:1"
      prefill_device: "cuda:1"

# MoE Gate configurations for GPU 2 (layers 31-45)
- match:
    name: "^model\\.layers\\.(3[1-9]|4[0-5])\\.mlp\\.gate$"
    class: ktransformers.models.modeling_deepseek_v3.MoEGate
  replace:
    class: ktransformers.operators.gate.KMoEGate
    kwargs:
      generate_device: "cuda:2"
      prefill_device: "cuda:2"

# MoE Gate configurations for GPU 3 (layers 46-60)
- match:
    name: "^model\\.layers\\.(4[6-9]|5[0-9]|60)\\.mlp\\.gate$"
    class: ktransformers.models.modeling_deepseek_v3.MoEGate
  replace:
    class: ktransformers.operators.gate.KMoEGate
    kwargs:
      generate_device: "cuda:3"
      prefill_device: "cuda:3"

# Expert configurations for GPU 0 (layers 0-15)
- match:
    name: "^model\\.layers\\.(0|[1-9]|1[0-5])\\.mlp\\.experts$"
  replace:
    class: ktransformers.operators.experts.KTransformersExperts
    kwargs:
      prefill_device: "cuda:0"
      prefill_op: "KExpertsTorch"
      generate_device: "cpu"
      generate_op: "KExpertsCPU"
      out_device: "cuda:0"
  recursive: False

# Expert configurations for GPU 1 (layers 16-30)
- match:
    name: "^model\\.layers\\.(1[6-9]|2[0-9]|30)\\.mlp\\.experts$"
  replace:
    class: ktransformers.operators.experts.KTransformersExperts
    kwargs:
      prefill_device: "cuda:1"
      prefill_op: "KExpertsTorch"
      generate_device: "cpu"
      generate_op: "KExpertsCPU"
      out_device: "cuda:1"
  recursive: False

# Expert configurations for GPU 2 (layers 31-45)
- match:
    name: "^model\\.layers\\.(3[1-9]|4[0-5])\\.mlp\\.experts$"
  replace:
    class: ktransformers.operators.experts.KTransformersExperts
    kwargs:
      prefill_device: "cuda:2"
      prefill_op: "KExpertsTorch"
      generate_device: "cpu"
      generate_op: "KExpertsCPU"
      out_device: "cuda:2"
  recursive: False

# Expert configurations for GPU 3 (layers 46-60)
- match:
    name: "^model\\.layers\\.(4[6-9]|5[0-9]|60)\\.mlp\\.experts$"
  replace:
    class: ktransformers.operators.experts.KTransformersExperts
    kwargs:
      prefill_device: "cuda:3"
      prefill_op: "KExpertsTorch"
      generate_device: "cpu"
      generate_op: "KExpertsCPU"
      out_device: "cuda:3"
  recursive: False

# Attention configurations for GPU 0 (layers 0-15)
- match:
    name: "^model\\.layers\\.(0|[1-9]|1[0-5])\\.self_attn$"
  replace:
    class: ktransformers.operators.attention.KDeepseekV2Attention
    kwargs:
      generate_device: "cuda:0"
      prefill_device: "cuda:0"

# Attention configurations for GPU 1 (layers 16-30)
- match:
    name: "^model\\.layers\\.(1[6-9]|2[0-9]|30)\\.self_attn$"
  replace:
    class: ktransformers.operators.attention.KDeepseekV2Attention
    kwargs:
      generate_device: "cuda:1"
      prefill_device: "cuda:1"

# Attention configurations for GPU 2 (layers 31-45)
- match:
    name: "^model\\.layers\\.(3[1-9]|4[0-5])\\.self_attn$"
  replace:
    class: ktransformers.operators.attention.KDeepseekV2Attention
    kwargs:
      generate_device: "cuda:2"
      prefill_device: "cuda:2"

# Attention configurations for GPU 3 (layers 46-60)
- match:
    name: "^model\\.layers\\.(4[6-9]|5[0-9]|60)\\.self_attn$"
  replace:
    class: ktransformers.operators.attention.KDeepseekV2Attention
    kwargs:
      generate_device: "cuda:3"
      prefill_device: "cuda:3"

# Model configuration
- match:
    name: "^model$"
  replace:
    class: "ktransformers.operators.models.KDeepseekV2Model"
    kwargs:
      per_layer_prefill_intput_threshold: 0
      transfer_map:
        16: "cuda:1"
        31: "cuda:2"
        46: "cuda:3"

# Default device mapping for layers
- match:
    name: "^model\\.layers\\.(0|[1-9]|1[0-5])\\."
  replace:
    class: "default"
    kwargs:
      generate_device: "cuda:0"
      prefill_device: "cuda:0"

- match:
    name: "^model\\.layers\\.(1[6-9]|2[0-9]|30)\\."
  replace:
    class: "default"
    kwargs:
      generate_device: "cuda:1"
      prefill_device: "cuda:1"

- match:
    name: "^model\\.layers\\.(3[1-9]|4[0-5])\\."
  replace:
    class: "default"
    kwargs:
      generate_device: "cuda:2"
      prefill_device: "cuda:2"

- match:
    name: "(^model\\.layers\\.(4[6-9]|5[0-9]|60)\\.)|model\\.norm|lm_head"
  replace:
    class: "default"
    kwargs:
      generate_device: "cuda:3"
      prefill_device: "cuda:3"
